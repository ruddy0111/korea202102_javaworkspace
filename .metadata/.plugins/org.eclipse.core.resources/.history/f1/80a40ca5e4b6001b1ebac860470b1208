package app0517.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import com.mysql.jdbc.PreparedStatement;

//Mysql DB에 레코드  넣어보기
//자바 언어로 데이터  베이스를  연동하는  기술을 가리켜 JDBC라 한다.
public class DBInsert {
	public static void main(String[] args) {
	//모든 ~~DB 작업 수행은  절차가  동일하다.
		//0) 해당 DB에 맞는 드라이버 클래스를 로드해야한다.
		//드라이버는 jar파일 형태
		//jar(Java Archive) : 자바의 클래스를 압축시켜놓은 확장자
		try {
			Class.forName("com.mysql.jdbc.Driver");//드라이버  클래스 로드
			System.out.println("드라이버 로드 성공");
		} catch (ClassNotFoundException e1) {
			System.out.println("해당 드라이버를 찾을 수 없습니다.");
			e1.printStackTrace();
		}
		//1) DB접속
		String url="jdbc:mysql://localhost:3306/javase";
		String user="root";
		String pass="1234";
		try {
			//아래의 코드에서처럼, DriverManager에 의해 접속이 성공된 경우에만
			//접속 정보를 가진  Connection 객체가 반환된다.
			//접속에  실패할 경우  Connection 객체가  반환되지 않으므로, null로 초기화 된다.
			Connection con =  DriverManager.getConnection(url, user,  pass);
			if(con==null) {
				System.out.println("접속실패");
			}else{
				System.out.println("접속 성공");
				String sql ="insert into member(user_id, password, name)";
				sql+=" values('gywn0111', '1111', 'juju')";
				
				//위의 쿼리문을 실행해보자
				PreparedStatement pstmt=null;//쿼리문 수행 객체
				pstmt=con.PreparedStatement(sql);//수행할 쿼리문 인수로 넣는다.
				pstmt.executeUpdate();//DML(insert, update, delete)쿼리 실행
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		//2) 쿼리수행
		
		//3) 접속 끊기
	}
}

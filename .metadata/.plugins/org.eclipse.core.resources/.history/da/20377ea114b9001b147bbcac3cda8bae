package db.table;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;

//DBMS 등의 표형식(2차원구조)의 데이터를 표현하는 최적화된 JTable을 이용해본다
public class TableBasic extends JFrame{
	//JTable의 생성자 중, 레코드는 이차원배열로 지원하고, 컬럼의 제목은 일차원배열로 지원하는 3번째 생성자를 이용해보자!!
	String[] columns= {"member_id","user_id","password","name","regdate"};
	String[][] rows;
	JTable table;
	JScrollPane scroll;
	String url = "jdbc:mysql://localhost:3306/javase?characterEncording = UTF-8";
	String user = "root";
	String password = "1234";
	Connection con;// 접속 후 그  정보를 가진객체
	
	public TableBasic() {
		table = new JTable(rows, columns); 
		scroll = new JScrollPane(table);
		
		add(scroll);
		
		setVisible(true);
		setBounds(500, 100, 500, 250);
		//setDefaultCloseOperation(EXIT_ON_CLOSE);//자원을 해제시킬 작업이 없기 때문에 이용가능...
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				if(con!=null) {
					try {
						con.close();
					} catch (SQLException e1) {
						e1.printStackTrace();
					}
				}
			}
		
		});
		
		getList();
	}
	public void getList() {
		/*
		 * 1) 드라이버 로드
		 * 2) 접속
		 * 3) 쿼리수행
		 * 4) 자원해제*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			JOptionPane.showMessageDialog(this,"드라이버 로드  성공");
			
			con = DriverManager.getConnection(url,  user, password);
			if(con!=null) {
				JOptionPane.showMessageDialog(this, "접속성공");
				select();
			}else {
				JOptionPane.showMessageDialog(this, "접속성공");
			}
		} catch (ClassNotFoundException e) {
			JOptionPane.showMessageDialog(this,"드라이버 로드  실패");
			e.printStackTrace();
		}catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public void select() {
		ResultSet rs;
		PreparedStatement pstmt=null;
		String sql = "select * from member";
		try {
			pstmt = con.prepareStatement(sql);//쿼리 수행 객체 생성
			rs = pstmt.executeQuery();//쿼리 실행 및 레코드 반환
			//rs의 데이터를 이차원  배열로 변환하여 JTable에 적용
			//총 레코드 수 구하기 : 1) 커서를 레코드 제일 마지막으로 이동-last() 2) 마지막으로 이동된 커서의 row넘버 구하기
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		new TableBasic();
		
	}

}


